What happens when you initialize a repository? Why do you need to do it?
Initializing a repository creates a new GIT repository which will allow you go commit new code changes.

Use git add to add files to the staging area. The staging area is where files reside prior to being committed.

If you accidentally add a file to the staging area, you can remove it using git reset. For example, if you accidentally add lesson_2_reflections.txt, but donâ€™t want it to be committed yet, run git reset lesson_2_reflections.txt and the file will be removed from the staging area, but it will still be in your working directory.

How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area allows you to batch up a small number of files from the working directory. This allows you to commit smaller logical code changes, instead of committing all files everytime there is a small change to the code base.

How can you use the staging area to make sure you have one commit per logical change?
The staging area allows you to move logically group changes into a pre-commit area without committing all of the code changes you have made.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
Branches are helpful if you want to make a copy of your code base to experiment with a new feature or make a new version but you don't want to change the master code yet.

How do the diagrams help you visualize the branch structure?
Multiple branches can get complex and drawing a diagram helps you visualize the branch structure. The diagram gives you a quick reference when switching between branches.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
Merging two branches together brings all code changes in both branches, from the convergence forward, into a new master branch combining changes from both branches. The new branch is shown in a diagram as a new commit because you want to include all the previous commits from the master as well as the commits from the branch that is being merged into it. 
