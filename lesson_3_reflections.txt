When would you want to use a remote repository rather than keeping all your work local?
You may want to use a remote repository when you have multiple people collaborating on the same code base.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
Manually pulling changes allows you to understand what changes have happened to the master branch since your last push/pull.

Describe the differences between forks, clones, and branches. When would you use one instead of another?
- Fork is a copy of a repository from one GitHub account to another
- Clone is a copy of a repository from your GitHub account to your local computer. You can also make a copy of a local repository to another location on your local computer using clone.
- Branches are also a copy of a repo but it is used within a repository to so that a new feature can be worked on while not affecting the master repository.

What is the benefit of having a copy of the last known state of the remote stored locally?
The benefit of having a copy of the last known state is it allows you to work offline for a longer period of time while working on add features to the latest code base.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
You could collaborate using shared file storage or use another versioning tool like SVN, but those tools aren't robust enough to allow two people to work on code changes at the same time without running into file lock and commit issues. Git and GitHub are much easier to use in that they manage conflicting commits and collaboration for you, which allows you to have a team of developers work together on the same code base.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
Using a seperate branch makes sense when you are adding/testing a new major change or feature and are not ready yet to introduce it into the master code base. Making changes directly in master makes sense if it is a small change or improvement to the application. The core feature set isn't changing.
When forking a repository, you could make your changes directly to the master branch in your fork, but when contributing to a public repository, itâ€™s standard practice to make the changes in a non-master branch within the fork. This way, you can easily keep your master branch up-to-date with master of the original repository, and merge changes from master into your branch when you are ready.
